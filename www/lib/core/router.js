// Generated by CoffeeScript 1.3.3

/*

Copyright (c) 2011-2012  Voicious

This program is free software: you can redistribute it and/or modify it under the terms of the
GNU Affero General Public License as published by the Free Software Foundation, either version
3 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License along with this
program. If not, see <http://www.gnu.org/licenses/>.
*/


(function() {
  var Router, error, logger, url;

  url = require('url');

  error = require('./errorHandler');

  logger = (require('./logger')).get("voicious");

  Router = {
    _requestObject: {
      path: [],
      args: {}
    },
    _regexp: new RegExp("^/([a-z0-9/\\._]*)(?:/argv[/]?)([a-z0-9/\\._]*)$|^/([a-z0-9/\\._]*)$", "i"),
    route: function(request, response) {
      this._requestObject = {
        path: [],
        args: {}
      };
      this._pathname = url.parse(request.url);
      logger.debug("Requesting " + this._pathname.href);
      this._method = request.method;
      this.parseUrl();
      this.clean();
      return this._requestObject;
    },
    parseQueryUrl: function() {
      var tab, tmp, value, _i, _len, _results;
      this._requestObject.path = this._pathname.pathname.toLowerCase().split('/');
      tmp = this._pathname.query.split('&');
      if (tmp != null) {
        _results = [];
        for (_i = 0, _len = tmp.length; _i < _len; _i++) {
          value = tmp[_i];
          tab = value.split('=');
          _results.push(this._requestObject.args[tab[0].toLowerCase()] = tab[1] != null ? tab[1] : null);
        }
        return _results;
      } else {
        tmp = this._pathname.query.split('=');
        return this._requestObject.args[tmp[0].toLowerCase()] = tmp[1] != null ? tmp[1] : null;
      }
    },
    parsePathUrl: function() {
      var handler, i, result, tmp, _i, _ref, _results;
      result = this._regexp.exec(this._pathname.pathname);
      if ((result != null) && (result[1] != null) && (result[2] != null)) {
        this._requestObject.path = result[1].toLowerCase().split('/');
        tmp = result[2].split('/');
        _results = [];
        for (i = _i = 0, _ref = tmp.length - 1; _i <= _ref; i = _i += 2) {
          _results.push(this._requestObject.args[tmp[i].toLowerCase()] = tmp[i + 1] != null ? tmp[i + 1] : null);
        }
        return _results;
      } else if ((result != null) && (result[3] != null)) {
        return this._requestObject.path = result[3].toLowerCase().split('/');
      } else {
        handler = new error.ErrorHandler;
        throw handler.throwError("This URL couldn't be resolved", 404);
      }
    },
    clean: function() {
      var key, value, _i, _len, _ref, _ref1, _results;
      _ref = this._requestObject.path;
      for (key = _i = 0, _len = _ref.length; _i < _len; key = ++_i) {
        value = _ref[key];
        if (value === '') {
          this._requestObject.path.splice(key, 1);
        }
      }
      _ref1 = this._requestObject.args;
      _results = [];
      for (key in _ref1) {
        value = _ref1[key];
        if (key === '') {
          _results.push(delete this._requestObject.args[key]);
        }
      }
      return _results;
    },
    parseUrl: function() {
      if (this._pathname.pathname === '/') {
        return this._requestObject.path[0] = '/';
      } else {
        if (this._pathname.query != null) {
          return this.parseQueryUrl();
        } else {
          return this.parsePathUrl();
        }
      }
    }
  };

  exports.Router = Router;

  /*
      if pathname? and pathname[0] is '/'
          if not pathname[1]
              routes['/'](request, response)
          else
              paths = pathname.split('/')
              if routes[paths[1]]?
                  routes[paths[1]](request, response)
              else
                  notFound(request, response)
  
  routes = []
  routes['/'] = home
  routes['includes'] = includes
  
  exports.home = home
  exports.includes = includes
  */


}).call(this);
