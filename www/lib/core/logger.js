// Generated by CoffeeScript 1.4.0

/*

Copyright (c) 2011-2012  Voicious

This program is free software: you can redistribute it and/or modify it under the terms of the
GNU Affero General Public License as published by the Free Software Foundation, either version
3 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License along with this
program. If not, see <http://www.gnu.org/licenses/>.
*/


(function() {
  var Logger, Loggers, config, fs, moment, _Logger;

  fs = require('fs');

  moment = require('./modules/moment');

  config = require('./config');

  Loggers = {};

  Logger = {
    DEBUG: 0,
    INFO: 1,
    WARN: 2,
    ERROR: 3,
    FATAL: 4,
    get: function(name) {
      if (!(Loggers[name] != null)) {
        Loggers[name] = new _Logger(name);
      }
      return Loggers[name];
    }
  };

  _Logger = (function() {

    function _Logger(name) {
      this.name = name;
      if (!fs.existsSync(config.LOG_PATH)) {
        fs.mkdirSync(config.LOG_PATH);
      }
    }

    _Logger.prototype._log = function(level, message) {
      var fd, theLog;
      if (message instanceof Object) {
        return;
      }
      if (level >= config.LOGLEVEL) {
        theLog = "[" + (function() {
          switch (level) {
            case Logger.DEBUG:
              return "DEBUG";
            case Logger.INFO:
              return "INFO";
            case Logger.WARN:
              return "WARN";
            case Logger.ERROR:
              return "ERROR";
            case Logger.FATAL:
              return "FATAL";
          }
        })();
        theLog += "] " + (moment()).format('MMMM Do YYYY, h:mm:ss a : ');
        theLog += message;
        fd = fs.openSync(config.LOG_PATH + this.name + '.log', 'a');
        fs.writeSync(fd, theLog + '\n', 0, theLog.length + 1, null);
        fs.closeSync(fd);
        if (config.LOGONSTDOUT) {
          return console.log(theLog);
        }
      }
    };

    _Logger.prototype.debug = function(message) {
      return this._log(Logger.DEBUG, message);
    };

    _Logger.prototype.info = function(message) {
      return this._log(Logger.INFO, message);
    };

    _Logger.prototype.warn = function(message) {
      return this._log(Logger.WARN, message);
    };

    _Logger.prototype.error = function(message) {
      return this._log(Logger.ERROR, message);
    };

    _Logger.prototype.fatal = function(message) {
      return this._log(Logger.FATAL, message);
    };

    return _Logger;

  })();

  exports.get = Logger.get;

  exports.DEBUG = Logger.DEBUG;

  exports.INFO = Logger.INFO;

  exports.WARN = Logger.WARN;

  exports.ERROR = Logger.ERROR;

  exports.FATAL = Logger.FATAL;

}).call(this);
