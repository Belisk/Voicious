// Generated by CoffeeScript 1.4.0

/*

Copyright (c) 2011-2012  Voicious

This program is free software: you can redistribute it and/or modify it under the terms of the
GNU Affero General Public License as published by the Free Software Foundation, either version
3 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License along with this
program. If not, see <http://www.gnu.org/licenses/>.
*/


(function() {
  var ErrorHandler, config, fs, http, jade, logger, moment;

  http = require('http');

  fs = require('fs');

  moment = require('./modules/moment');

  config = require('./config');

  jade = require('./render');

  logger = (require('./logger')).get('voicious');

  ErrorHandler = (function() {

    function ErrorHandler() {
      this._errorObj = {};
      this._errorCode = {
        400: "Bad Parameter",
        404: "Not Found",
        500: "Internal Server Error"
      };
    }

    ErrorHandler.prototype.log = function() {
      var key, text, value, _ref;
      text = "";
      _ref = this._errorObj;
      for (key in _ref) {
        value = _ref[key];
        text += value;
      }
      return logger.error(this._errorObj.text);
    };

    ErrorHandler.prototype.renderError = function() {
      return {
        httpErrorCode: this._errorObj.httpErrorCode,
        template: jade.Renderer.jadeRender('error.jade', {
          httpErrorCode: this._errorObj.httpErrorCode,
          httpErrorMsg: this._errorObj.httpErrorMsg,
          errno: this._errorObj.errno ? "Errno : " + this._errorObj.errno : "",
          syscall: this._errorObj.syscall ? "Syscall : " + this._errorObj.syscall : "",
          text: this._errorObj.text
        })
      };
    };

    ErrorHandler.prototype.throwError = function(text, httpErrorCode) {
      var key, value;
      this._errorObj.prompt = moment().format('MMMM Do YYYY, h:mm:ss a') + ' [Voicious] : ';
      if (typeof text === "object") {
        for (key in text) {
          value = text[key];
          if (key === "errno") {
            this._errorObj.errno = "[" + value + "] ";
          }
          if (key === "syscall") {
            this._errorObj.syscall = "(" + value + ") ";
          }
        }
      }
      this._errorObj.text = text;
      this.log();
      this._errorObj.httpErrorCode = httpErrorCode;
      this._errorObj.httpErrorMsg = this._errorCode[httpErrorCode];
      return this.renderError();
    };

    return ErrorHandler;

  })();

  exports.ErrorHandler = ErrorHandler;

}).call(this);
